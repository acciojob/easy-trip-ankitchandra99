package com.driver.controllers;

import com.driver.model.Airport;
import com.driver.model.City;
import com.driver.model.Flight;
import com.driver.model.Passenger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Date;
@Service
public class AirportService {
    private final AirportRepository airportRepository;
    private final Flight flightRepository;
    private final Passenger passengerRepository;

    public AirportService(AirportRepository airportRepository, Flight flightRepository, Passenger passengerRepository) {
        this.airportRepository = airportRepository;
        this.flightRepository = flightRepository;
        this.passengerRepository = passengerRepository;
    }

    @Autowired


    public String addAirport(Airport airport) {
        airportRepository.addAirport(airport);
        return "SUCCESS";
    }
    public String getLargestAirportName() {
        return airportRepository.getLargestAirportName();
    }

    public double getShortestDurationOfPossibleBetweenTwoCities(City fromCity, City toCity) {
        return airportRepository.getShortestDurationOfPossibleBetweenTwoCities(fromCity, toCity);
    }

    public int getNumberOfPeopleOnAirportOnDate(Date date, String airportName) {
        // Implement the logic to calculate the number of people on the airport on a specific date
        // Hint: You'll need to retrieve the flights for that airport on the given date and count the passengers.
        return 0;
    }
    public int calculateFlightFare(Integer flightId) {
        // Implement the logic to calculate the flight fare based on the number of people who have already booked the flight.
        return 0;
    }
    public String bookATicket(Integer flightId, Integer passengerId) {
        // Implement the logic to book a ticket for a passenger on a flight.
        // Check if the flight is not full and the passenger has not already booked the same flight.
        // If the booking is successful, return "SUCCESS", otherwise "FAILURE".
        return "FAILURE";
    }

    public String cancelATicket(Integer flightId, Integer passengerId) {
        // Implement the logic to cancel a ticket for a passenger on a flight.
        // Check if the passenger has booked the given flight and cancel the booking.
        // If the cancellation is successful, return "SUCCESS", otherwise "FAILURE".
        return "FAILURE";
    }

    public int countOfBookingsDoneByPassengerAllCombined(Integer passengerId) {
        // Implement the logic to count the total number of flight bookings done by a passenger.
        return 0;
    }

    public String addFlight(Flight flight) {
        // Implement the logic to add a flight to the system.
        return "SUCCESS";
    }
    public String getAirportNameFromFlightTakeoff(Integer flightId) {
        // Implement the logic to get the airport name from where the flight will be taking off.
        // Return null if the flightId is invalid or the airport name is not found.
        return null;
    }

    public int calculateRevenueOfAFlight(Integer flightId) {
        // Implement the logic to calculate the total revenue generated by a flight.
        // This will be based on the number of passengers who have booked the flight.
        return 0;
    }

    public String addPassenger(Passenger passenger) {
        return "SUCCESS";
    }
}
